{"version":3,"sources":["../../../src/web.ts"],"names":["FilePickerWeb","ERROR_PICK_FILE_CANCELED","options","a","this","openFilePicker","pickedFiles","Error","result","files","pickedFile","file","path","undefined","name","getNameFromUrl","mimeType","getMimeTypeFromUrl","size","getSizeFromUrl","blob","readData","getDataFromFile","data","push","accept","types","join","multiple","Promise","resolve","onChangeFired","input","document","createElement","type","addEventListener","Array","from","once","window","wait","click","reject","reader","FileReader","readAsDataURL","onload","base64","split","onerror","error","delayMs","setTimeout"],"mappings":"qQASaA,EAAb,iG,2BACkBC,yBAA2B,sBAD7C,sFAGS,WAAgBC,GAAhB,yBAAAC,EAAA,sEACqBC,KAAKC,eAAeH,GADzC,UACCI,EADD,6BAGG,IAAIC,MAAMH,KAAKH,0BAHlB,OAKCO,EAA0B,CAC9BC,MAAO,IANJ,cAQoBH,GARpB,4DAQMI,EARN,QASGC,EAAkB,CACtBC,UAAMC,EACNC,KAAMV,KAAKW,eAAeL,GAC1BM,SAAUZ,KAAKa,mBAAmBP,GAClCQ,KAAMd,KAAKe,eAAeT,GAC1BU,KAAMV,IAEkB,KAAf,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASmB,UAhBV,kCAiBiBjB,KAAKkB,gBAAgBZ,GAjBtC,QAiBDC,EAAKY,KAjBJ,eAmBHf,EAAOC,MAAMe,KAAKb,GAnBf,wKAqBEH,GArBF,gEAHT,0HA2BU,WACNN,GADM,0BAAAC,EAAA,6DAGAsB,GAAuB,QAAd,EAAO,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASwB,aAAK,eAAEC,KAAK,OAAQ,GACtCC,KAAoB,OAAP1B,QAAO,IAAPA,OAAO,EAAPA,EAAS0B,UAJtB,kBAKC,IAAIC,SAAQ,SAAAC,GACjB,IAAIC,GAAgB,EACdC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACbH,EAAMP,OAASA,EACfO,EAAMJ,SAAWA,EACjBI,EAAMI,iBACJ,UACA,WACEL,GAAgB,EAChB,IAAMtB,EAAQ4B,MAAMC,KAAKN,EAAMvB,OAAS,IACxCqB,EAAQrB,KAEV,CAAE8B,MAAM,IAGVC,OAAOJ,iBACL,QADF,sBAEE,sBAAAjC,EAAA,sEACQ,EAAKsC,KAAK,KADlB,WAEMV,EAFN,iDAKED,OAAQjB,GALV,2CAOA,CAAE0B,MAAM,IAEVP,EAAMU,YAhCF,2CA3BV,2HA+DU,WAAsB/B,GAAtB,SAAAR,EAAA,+EACC,IAAI0B,SAAQ,SAACC,EAASa,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcnC,GACrBiC,EAAOG,OAAS,WACd,IAEMC,GAFkC,kBAAlBJ,EAAOpC,OAAsBoC,EAAOpC,OAAS,IACrCyC,MAAM,WACN,IAAM,GACpCnB,EAAQkB,IAEVJ,EAAOM,QAAU,SAAAC,GACfR,EAAOQ,QAXL,2CA/DV,mFA+EU,SAAexC,GACrB,OAAOA,EAAKG,OAhFhB,gCAmFU,SAAmBH,GACzB,OAAOA,EAAKwB,OApFhB,4BAuFU,SAAexB,GACrB,OAAOA,EAAKO,OAxFhB,yDA2FU,WAAWkC,GAAX,SAAAjD,EAAA,+EACC,IAAI0B,SAAQ,SAAAC,GAAO,OAAIuB,WAAWvB,EAASsB,OAD5C,2CA3FV,4D,MAAmC","file":"static/js/42.da6625cf.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type {\r\n  File as FileModel,\r\n  FilePickerPlugin,\r\n  PickFilesOptions,\r\n  PickFilesResult,\r\n} from './definitions';\r\n\r\nexport class FilePickerWeb extends WebPlugin implements FilePickerPlugin {\r\n  public readonly ERROR_PICK_FILE_CANCELED = 'pickFiles canceled.';\r\n\r\n  public async pickFiles(options?: PickFilesOptions): Promise<PickFilesResult> {\r\n    const pickedFiles = await this.openFilePicker(options);\r\n    if (!pickedFiles) {\r\n      throw new Error(this.ERROR_PICK_FILE_CANCELED);\r\n    }\r\n    const result: PickFilesResult = {\r\n      files: [],\r\n    };\r\n    for (const pickedFile of pickedFiles) {\r\n      const file: FileModel = {\r\n        path: undefined,\r\n        name: this.getNameFromUrl(pickedFile),\r\n        mimeType: this.getMimeTypeFromUrl(pickedFile),\r\n        size: this.getSizeFromUrl(pickedFile),\r\n        blob: pickedFile,\r\n      };\r\n      if (options?.readData !== false) {\r\n        file.data = await this.getDataFromFile(pickedFile);\r\n      }\r\n      result.files.push(file);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private async openFilePicker(\r\n    options?: PickFilesOptions,\r\n  ): Promise<File[] | undefined> {\r\n    const accept = options?.types?.join(',') || '';\r\n    const multiple = !!options?.multiple;\r\n    return new Promise(resolve => {\r\n      let onChangeFired = false;\r\n      const input = document.createElement('input');\r\n      input.type = 'file';\r\n      input.accept = accept;\r\n      input.multiple = multiple;\r\n      input.addEventListener(\r\n        'change',\r\n        () => {\r\n          onChangeFired = true;\r\n          const files = Array.from(input.files || []);\r\n          resolve(files);\r\n        },\r\n        { once: true },\r\n      );\r\n      // Workaround to detect when Cancel is selected in the File Selection dialog box.\r\n      window.addEventListener(\r\n        'focus',\r\n        async () => {\r\n          await this.wait(1000);\r\n          if (onChangeFired) {\r\n            return;\r\n          }\r\n          resolve(undefined);\r\n        },\r\n        { once: true },\r\n      );\r\n      input.click();\r\n    });\r\n  }\r\n\r\n  private async getDataFromFile(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        const result = typeof reader.result === 'string' ? reader.result : '';\r\n        const splittedResult = result.split('base64,');\r\n        const base64 = splittedResult[1] || '';\r\n        resolve(base64);\r\n      };\r\n      reader.onerror = error => {\r\n        reject(error);\r\n      };\r\n    });\r\n  }\r\n\r\n  private getNameFromUrl(file: File): string {\r\n    return file.name;\r\n  }\r\n\r\n  private getMimeTypeFromUrl(file: File): string {\r\n    return file.type;\r\n  }\r\n\r\n  private getSizeFromUrl(file: File): number {\r\n    return file.size;\r\n  }\r\n\r\n  private async wait(delayMs: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, delayMs));\r\n  }\r\n}\r\n"],"sourceRoot":""}